Больше типов: структуры, срезы и словари.
Научитесь описывать типы на основе существующих: это занятие охватывает структуры, массивы, срезы и словари.

Авторы Go
https://golang.org

* Указатели

В Go есть указатели.
Указатель содержит адрес памяти для переменной.

Тип `*T` - указатель на значение с типом `T`. Его нулевым значением является `nil`.

    var p *int

Оператор `&` генерирует указатель на свой операнд.

    i := 42
    p := &i

Оператор `*` определяет зависящее значение по указателю.

    fmt.Println(*p) // прочитать i через указатель p
    *p = 21 // задать i через указатель p

Это известно как «разыменования» или «присвоение».

В отличие от C, в Go нет адресной арифметики.

.play moretypes/pointers.go

* Структуры

`Struct` - это коллекция полей.

(А объявление `type` делает то, что вы могли бы ожидать.)

.play moretypes/structs.go

* Поля структуры

К полям структуры обращаются через точку.

.play moretypes/struct-fields.go

* Указатели на структуры

К полям структуры можно обращаться через указатель на структуру.

Косвенная адресация через указатель является прозрачной.

.play moretypes/struct-pointers.go

* Литералы структур

Литерал структуры определяет новую структуру через перечень значений ее полей.

Вы можете перечислить только отдельный набор полей с помощью синтаксиса `Name:` ​​(порядок именуемых полей неважен).

Специальный префикс `&` возвращает указатель на значение структуры.

.play moretypes/struct-literals.go

* Масивы

Тип `[n]T` - массив с `n` значений типа `T`.

выражение

    var a [10]int

объявляет переменную `a` массивом из десяти целых чисел.

Размер массива является частью его типа, поэтому массивы не могут менять размер.
Это кажется ограничением, но не волнуйтесь;
Go обеспечивает удобный способ работы с массивами.

.play moretypes/array.go

* Срезы

Срез указывает на массив значений, но также включает длину.

`[]T` - это срез с элементами типа `T`.

`len(s)` возвращает длину среза `s`.

.play moretypes/slices.go

* Срезы срезов

Срезы могут быть пере-резаные, что создает новое значение среза, которое указывает на тот же массив.

выражение

    s[lo:hi]

определяет вырезку элементов с `lo` к `hi-1`, включительно. Итак

    s[lo:lo]

пустая, а

    s[lo:lo+1]

содержит один элемент.

.play moretypes/slices-of-slice.go

* Создание срезов

Срезы создаются функцией `make`. Она работает путем создания обнуления массива и возвращает срез, ссылающейся на этот массив:

    a := make([]int, 5) // len(a) = 5

Чтобы задать емкость, передайте третий параметер для `make`:

    b := make([]int 0, 5) // len(b) = 0, cap(b) = 5
    b := b[:cap(b)] // len(b) = 5, cap(b) = 5
    b := b[1:] // len(b) = 4, cap(b) = 4

.play moretypes/making-slices.go

* Nil срезы

Нулевое значение среза - это `nil`.

Nil срез имеет длину и емкость равны 0.

.play moretypes/nil-slices.go

* Добавление элементов к срезу

Часто приходится добавлять к срезу новые элементы, поэтому Go обеспечивает встроенную
функцию `append`. [[Https://golang.org/pkg/builtin/#append][Документация]]
встроенного пакета описывает `append`.

    func append (s []T, vs...T) []T

Первый параметр `s` в `append` - это срез типа `T`, а другие
значениями `T`, которые передаются к срезу.

Значение результата `append` - это срез, содержащий все элементы
начального среза плюс преданные значения.

Если скрытый за `s` массив слишком малым, чтобы вместить все предоставленные значения,
то будет выделен больший массив. Возвращенная срез указывает на новый массив.

(Подробнее о срезе, прочитайте статью [[https://blog.golang.org/go-slices-usage-and-internals][Срезы: употребление и внутреннее устройство]].)

.play moretypes/append.go

* Range

Разновидность `range` цикла `for` используется для среза или словаря.

Когда проходит срез из `range`, два значения возвращаются для каждой итерации.
Первым является индекс, а второе значение - это копия элемента за тем индексом.

.play moretypes/range.go

* Range, продолжение

Вы можете пропустить позицию или значение, написав `_`.

Если нужна только позиция, то "value" можно отбросить совсем.

.play moretypes/range-continued.go

* Упражнение: Срезы

Реализуйте `Pic`. Она должна возвращать срез длины `dy`, каждый элемент которой является срезом `dx` 8-битных беззнаковых целых.
При выполнении программы, она выведет ваше изображение,
интерпретируя целые числа как значение на шкале черно-белых (в порядке, сине-белых) цветов.

Выбор изображения остается за вами. Среди интересных функций `(x + y) / 2`, `x *  y` и `x ^ y`.

(Вам нужно будет принять цикл для создания каждого `[]uint8` внутри `[][]uint8`.)

(Используйте `uint8 (intValue)` для преобразования типов.)

.play moretypes/exercise-slices.go

* Словари

Словарь соотносят ключи к значениям.

Перед использованием, словарь должен быть создан через `make`; словарь `nil` является пустым и не может быть присвоен.

.play moretypes/maps.go

* Литералы словарей

Литералы словарей такие же, как литералы структур, но ключи являются обязательными.

.play moretypes/map-literals.go

* Литералы словарей, продолжение

Если на верхнем уровне просто название типа, то ее можно пропустить в перечне элементов литерала.

.play moretypes/map-literals-continued.go

* Изменение словарей

Внесение или обновления элемента для словаря `m`:

    m[key] := elem

Получить элемент:

    elem := m[key]

Удалить элемент:

    delete(m, key)

Проверить, существование ключа делается через присвоение двух значений:

    elem, ok := m[key]

Если `key` присутствует в `m`, `ok` равный` true`. Если нет, то `ok` равный` false`.

Если `key` отсутствует в словаре, то` elem` принимает нулевое значение типа элемента словаря.

*Примечание:* если `elem` или` ok` до сих пор не были объявлены, вы можете применить краткую запись объявления:

    elem, ok := m[key]

.play moretypes/mutating-maps.go

* Упражнение: Словари

Реализуйте `WordCount`. Она должна возвращать словарь с количеством
повторений каждого «слова» в строке `s`. Функция `wc.Test`
выполняет набор проверок для данной функции и выводит успех или неудача.

Вам может понадобиться [[https://golang.org/pkg/strings/#Fields][strings.Fields]].

.play moretypes/exercise-maps.go

* Функции как значение

Функции также являються значениями. Они могут передаваться как и другие значения.

Функции могут быть использованы в качестве аргументов функции и или значение возврата.

.play moretypes/function-values.go

* Замыкание функций

Функции Go могут быть замыканиями. Замыкания - это Фунция как значение, ссылается на переменные, которые находятся вне ее тела.

Например, функция `adder` возвращает замыкания. Каждое замыкания связано со своей собственной переменной `sum`.

.play moretypes/function-closures.go

Упражнение: Замыкание Фибоначчи

Давайте поиграем с фунциями.

Реализуйте функцию `fibonacci`, которая возвращает функцию (замыкание), что возвращает последовательные числа Фибоначчи.

.play moretypes/exercise-fibonacci-closure.go

* Поздравляем!

Вы завершили занятие!

Вы можете вернуться к списку [[/list][занятий]], чтобы найти, что изучить дальше, или перейти к [[javascript:click('.next-page')][следующему занятию]].