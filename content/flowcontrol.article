Управление потоком: for, if, else и defer
Научитесь управлять потоком вашей программы с помощью условий, циклов, переключений и отложений.

Go Авторы
https://golang.org

* For

Go имеет только один оператор цикла - `for`.

Цикл `for` пишется так же, как в C или Java, кроме того, что `(`)` отсутствуют (они даже недозволенные), а `{`}` являются обязательными.

.play flowcontrol/for.go

* For, продолжение

Как в C или Java, инструкции перед и после условия могут быть оставлены пустыми.

.play flowcontrol/for-continued.go

* For - это "while" для Go

В конце концов, можно избавиться от точек с запятыми - `while` с C заменяется `for` в Go.

.play flowcontrol/for-is-gos-while.go

* Навсегда

Если пропустить условие повторения, цикл будет повторяться бесконечно.

.play flowcontrol/forever.go

* If

Инструкция `if` выглядит так же, как в C или Java, кроме того, что `(`)` отсутствуют, а `{`}` являются обязательными.

(Узнаете?)

.play flowcontrol/if.go

* If с краткой инструкцией

Подобно `for`, `if` может начинаться с краткой инструкции для выполнения перед условием.

Переменные, объявленные в этой инструкции, присутствуют в контексте только до окончания `if`.

(Попробуйте использовать `v` в последний инструкции `return`.)

.play flowcontrol/if-with-a-short-statement.go

* If и else

Переменные, объявленные внутри короткой инструкции `if`, также доступны внутри любого из блоков `else`.

(Оба вызова `pow` выполняются и возвращают еще до того, как начинается вызов `fmt.Println` в `main`.)

.play flowcontrol/if-and-else.go

* Упражнение: Циклы и функции

Чтобы поиграть с функциями и циклами, напишите функцию квадратного корня с помощью метода Ньютона.

В данном случае, метод Ньютона состоит в том, чтобы примерно определить `Sqrt(x)`, подобрав исходную точку _z_, а затем повторять:

.image /content/img/newton.png

Для начала, просто выполните расчет 10 раз и посмотрите, как вы приблизились к ответу для различных значений (1, 2, 3, ...).

Затем, замените условие цикла, чтобы он останавливался, как только значение перестало меняться (или меняется с очень малой разницей). Посмотрите, это занимает больше или меньше повторений. Как близко вы к [[https://golang.org/pkg/math/#Sqrt][math.Sqrt]]?

Подсказка: чтобы объявить и присвоить значение с плавающей точкой, дайте ему синтаксис подвижной комы или примените преобразования:

    z := float64(1)
    z := 1.0

.play flowcontrol/exercise-loops-and-functions.go

* Switch

Наверное, вы догадывались, как будет выглядеть `switch`.

Тело `case` прерывается автоматически, за исключением, когда оно завершается инструкцией `fallthrough`.

.play flowcontrol/switch.go

* Switch, порядок оценки

Случаи переключения оцениваются сверху вниз, останавливаясь, если случай успешный.

(К примеру,

    switch i {
    case 0:
    case f ():
    }

не вызывает `f`, если `i == 0`.)

#appengine *Примечание:* На Go площадке отсчет времени всегда начинается с
#appengine: 2009-11-10 23:00:00 UTC, раскрыть значимость этой даты оставляем
#appengine: упражнением для читателя.

.play flowcontrol/switch-evaluation-order.go

* Switch без условия

Переключение без условия - это то же, что `switch`true`.

Это построение может быть простым способом записи длинных цепочек if-then-else.

.play flowcontrol/switch-with-no-condition.go

* Defer

Инструкция отложения переносит выполнение функции на время, пока не завершится функция содержащя её.

Аргументы отложенного вызова определяются безотлагательно, но сам вызов не выполняется до возвращения функции, что его окружает.

.play flowcontrol/defer.go

* Накопление отложений

Отложенный вызов функции добавляется в стек.
Когда функция завершает выполнение ее отложенные вызовы выполняются в порядке "последним вошел - первым ушел".

Чтобы узнать больше об инструкции отложения, прочитайте
[[Https://blog.golang.org/defer-panic-and-recover][запись в блоге]].

.play flowcontrol/defer-multi.go

* Поздравляем!

Вы завершили занятие!

Вы можете вернуться к списку [[/list][занятий]], чтобы найти, что изучить дальше, или перейти к [[javascript:click('.next-page')][следующему занятию]].