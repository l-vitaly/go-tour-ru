Пакеты, переменные и функции.
Изучите базовые компоненты любой Go программы.

Авторы Go
https://golang.org


* Пакеты

Каждая программа на Go состоит из пакетов.

Программы начинают выполнение из пакета `main`.

Данная программа использует пакеты `"fmt"` и `"math/rand"`.

При условии, название пакета совпадает с последним элементом пути импорта.
Например, пакет `"math/rand"` содержит файлы, начинающиеся с инструкции `package`rand`.

#appengine *Примечание:* среду, в которой выполняются программы является
#appengine: определенным, то есть при каждом запуске программы примера
#appengine: `rand.Intn` всегда возвращать одно и то же число.
#appengine:
#appengine: (Чтобы получить другой результат, задайте начальное «зерно» генератора чисел; см. [[http://golang.org/pkg/math/rand/#Seed][`rand.Seed`]].)

.play basics/packages.go

Импорт

Данный код объединяет импорт в скобки, так называемая «составленная» инструкция импорта.

Вы также можете писать несколько инструкций импорта, вот так:

import "fmt"
import "math"

Но хорошим стилем является использование составленной инструкции импорта.

.play basics/imports.go

* Экспортируемые названия

В Go имя экспортируется, если оно начинается с большой буквы.

После импортирования пакета, вы можете обращаться к именам, которые он экспортирует.
Все экспортируемых имена не доступны вне самого пакетом.

`Foo` экспортируется, так же как` FOO`. Имя `foo` не экспортируются.

Выполните код. Затем переименуйте `math.pi` на` math.Pi` и попробуйте снова.

.play basics/exported-names.go

* Функции

Функция может принимать ноль или более аргументов.

В данном примере `add` принимает два параметра типа` int`.

Обратите внимание, что тип находится после имени переменной.

(Более о типах и о том, почему они выглядят именно так, смотрите в [[https://blog.golang.org/gos-declaration-syntax][статье о синтаксисе деклараций Go]].)

.play basics/functions.go

* Функции, продолжение

Когда двое или более последовательных параметров функции имеют одинаковый тип, то этот тип может быть пропущен для всех параметров, кроме последнего.

В данном случае, мы сократили

x int, y int

к

x, y int

.play basics/functions-continued.go

* Несколько результатов

Функция может возвращать любое число результатов.

Функция `swap` возвращает две строки.

.play basics/multiple-results.go

* Возвращение именуемых значений

В Go значение результата могут быть именуемыми. Если так, то они ведут себя как переменные, определенные в начале функции.

Данные имена должны свидетельствовать о содержании возвращенных значений.

Инструкция `return` без аргументов возвращает текущие значения результатов. Это называется «голое» возвращения.

Голые возвращения должны использоваться только в коротких функциях, как в данном примере. В длинных функциям они могут помешать простоте чтения.

.play basics/named-results.go

* Переменные

Инструкция `var` объявляет перечень переменных так же, как для аргументов функции - тип в конце.

Инструкция `var` может быть на уровне пакета или фунции. В данном примере присутствуют оба варианта.

.play basics/variables.go

* Переменные с инициализацией

Объявления var может включать инициализацию, отдельно для каждой переменной.

Если присутствует инициализация, то тип может быть пропущен - переменная примет тип исходного значения.

.play basics/variables-with-initializers.go

* Короткое объявление переменных

Внутри функции краткая запись присвоения `=` может быть использован вместо объявления `var` с неявным типом.

Вне функции каждая инструкция начинается с ключевого слова ( `var`,` func` и т.д.), поэтому запись `=` недоступна.

.play basics/short-variable-declarations.go

* Базовые типы

Базовые типы Go

bool

string

int int8 int16 int32 int64
uint uint8 uint16 uint32 uint64 uintptr

byte // псевдоним uint8

rune // псевдоним int32
// Представляет код символа в системе Unicode

float32 float64

complex64 complex128

Данный пример показывает переменные различных типов,
а также то, что объявление переменных может быть «составлена» в блоки,
похожи на инструкции импорта.

Типы `int`,` uint` и `uintptr` обычно занимают 32 бита на 32-битной системе и 64 бита на 64-битной.
Вы должны использовать `int` для целых значений, за исключением случаев, когда есть определенные причины для использования размерных или беззнаковых типов.

.play basics/basic-types.go

* Нулевые значения

Переменные, объявленные без явного начального значения, принимают свои
_нулевые_значения_.

Нулевое значение это:

- `0` для числовых типов,
- `False` для булевого типа,
- `" "` (Пустую строку) для строк.

.play basics/zero.go

* Преобразование типов

Выражение `T(v)` переводит значение `v` к типу` T`.

Некоторые числовые преобразования:

var i int = 42
var f float64 = float64(i)
var u uint = uint(f)

Или упрощенная запись:

i = 42
f = float64(i)
u = uint(f)

В отличие от C, Go требует явного преобразования для присваивания элементов различного типа.
Посмотрите, что произойдет, если убрать в примере преобразования `float64` или` int`.

.play basics/type-conversions.go

* Определение типов

Когда переменная объявлена ​​без указания ее типа (используя `var` без типа или` = `синтаксис), то тип переменной _определенный_ из значения на правом боку.

Когда правый бок объявления имеет тип, то новая переменная принимает тот же тип:

var i int
j = i // j is an int

Но когда на правом боку находится числовая константа без типа, то новая переменная может быть `int`,` float64` или `complex128`, в зависимости от точности константы:

i = 42 // int
f = 3.142 // float64
g = 0.867 + 0.5i // complex128

Попробуйте изменить первоначальное значение `v` в коде примера, и наблюдайте, как это влияет на его тип.

.play basics/type-inference.go

* Константы

Константы объявляются так же, как переменные, но ключевым словом `const`.

Константа может быть символом, строкой, логическим (булевым) или числовым значением.

Константы не могут быть объявлены с помощью Синаксиса `=`.

.play basics/constants.go

* Числовые константы

Числовые константы - это _значення_ с высокой точностью.

Констатирует без типа примает тип, которого требует ее контекст.

Попробуйте вывести `needInt(Big)`.

(`Int` может содержать не более 64-битного целого числа, а иногда меньше.)

.play basics/numeric-constants.go

* Поздравляем!

Вы завершили занятие!

Вы можете вернуться к списку [[/list][занятий]], чтобы найти, что изучить дальше, или перейти к [[javascript:click ('.Next-page')][следующему занятию]].